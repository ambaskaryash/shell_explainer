{
  "ls": {
    "description": "List information about files and directories.",
    "flags": {
      "-l": "Use a long listing format.",
      "-a": "Include directory entries whose names begin with a dot (.).",
      "-h": "Print sizes in human readable format (e.g., 1K 234M 2G).",
      "--color": "Colorize the output.",
      "-R": "Recursively list subdirectories."
    },
    "usage": [
      "ls -l                 # List files with detailed information",
      "ls -a                 # Show all files including hidden ones",
      "ls -lhR               # Long listing, human-readable sizes, recursively"
    ]
  },
  "grep": {
    "description": "Search for patterns in files using regular expressions.",
    "flags": {
      "-i": "Ignore case distinctions in patterns and input data.",
      "-r": "Read all files under each directory recursively.",
      "-v": "Invert match to select non-matching lines.",
      "-c": "Print only a count of matching lines per file.",
      "-n": "Print line number with output lines."
    },
    "usage": [
      "grep 'error' logfile.txt             # Search 'error' in logfile.txt",
      "grep -ir 'failed' /var/log           # Case-insensitive recursive search",
      "grep -v 'success' logfile.txt       # Show lines not containing 'success'"
    ]
  },
  "tar": {
    "description": "Archive or extract files from an archive file called a tarball.",
    "flags": {
      "x": "Extract files from an archive.",
      "z": "Filter the archive through gzip compression.",
      "v": "Verbosity: list files processed.",
      "f": "Use archive file or device ARCHIVE.",
      "-C": "Change to directory DIR before performing any operations."
    },
    "usage": [
      "tar czvf archive.tar.gz folder/         # Create gzipped archive of folder",
      "tar xzvf archive.tar.gz                  # Extract archive contents",
      "tar -tf archive.tar.gz                   # List contents of archive"
    ]
  },
  "curl": {
    "description": "Transfer data from or to a server using various protocols.",
    "flags": {
      "-I": "Fetch the HTTP header only.",
      "-L": "Follow redirects.",
      "-X": "Specify custom request method.",
      "-d": "Send specified data in POST request.",
      "-H": "Pass custom header(s) to the server."
    },
    "usage": [
      "curl -I https://example.com              # Fetch HTTP headers",
      "curl -L http://example.com               # Follow redirects",
      "curl -X POST -d 'key=value' http://api  # POST data with custom method"
    ]
  },
  "systemctl": {
    "description": "Control and manage systemd services and the system state.",
    "flags": {
      "status": "Check the status of a service.",
      "start": "Start a service.",
      "stop": "Stop a service.",
      "restart": "Restart a service.",
      "enable": "Enable a service to start on boot.",
      "disable": "Disable a service from starting on boot."
    },
    "usage": [
      "systemctl status nginx                   # Check nginx service status",
      "systemctl start sshd                     # Start SSH service",
      "systemctl enable docker                  # Enable Docker to start at boot"
    ]
  },
  "mkdir": {
    "description": "Create directories with the specified names.",
    "flags": {
      "-p": "Create parent directories as needed.",
      "-m": "Set file mode (permissions) of the new directory.",
      "--help": "Show help information."
    },
    "usage": [
      "mkdir new_folder                         # Create directory",
      "mkdir -p /tmp/folder/subfolder           # Create nested directories",
      "mkdir -m 755 mydir                       # Create directory with permissions"
    ]
  },
  "rm": {
    "description": "Remove files or directories.",
    "flags": {
      "-r": "Remove directories and their contents recursively.",
      "-f": "Ignore nonexistent files and arguments, never prompt.",
      "-i": "Prompt before every removal."
    },
    "usage": [
      "rm file.txt                             # Remove a file",
      "rm -rf /tmp/tempdir                     # Remove directory and contents",
      "rm -i important_file                    # Prompt before removal"
    ]
  },
  "ps": {
    "description": "Display information about active processes.",
    "flags": {
      "-e": "Select all processes.",
      "-f": "Full-format listing.",
      "-u": "Select by user."
    },
    "usage": [
      "ps -ef                                 # Full list of all processes",
      "ps -u username                         # Processes for a user",
      "ps -e | grep sshd                      # Find sshd process"
    ]
  },
  "chmod": {
    "description": "Change the file mode (permissions) of files or directories.",
    "flags": {
      "-R": "Change files and directories recursively.",
      "--reference": "Use permissions from reference file."
    },
    "usage": [
      "chmod 755 script.sh                    # Set permissions on a file",
      "chmod -R 644 /var/www/html             # Change permissions recursively",
      "chmod --reference=existingfile newfile  # Set permissions to match another file"
    ]
  },
  "chown": {
    "description": "Change file owner and group.",
    "flags": {
      "-R": "Operate on files and directories recursively.",
      "-v": "Output a diagnostic for every file processed."
    },
    "usage": [
      "chown user file.txt                    # Change owner of file",
      "chown -R user:group /var/www/html     # Change owner and group recursively",
      "chown -v user file.txt                 # Verbose output"
    ]
  },
  "df": {
    "description": "Report disk space usage of file systems.",
    "flags": {
      "-h": "Print sizes in human readable format.",
      "-T": "Show file system type.",
      "--total": "Produce a grand total."
    },
    "usage": [
      "df -h                                 # Human-readable disk usage",
      "df -T                                 # Show file system type",
      "df --total                            # Show total disk usage"
    ]
  },
  "du": {
    "description": "Estimate file and directory space usage.",
    "flags": {
      "-h": "Show sizes in human readable format.",
      "-s": "Display only a total for each argument.",
      "--max-depth": "Limit the depth of directory tree.",
      "-a": "Write counts for all files, not just directories."
    },
    "usage": [
      "du -h /var/log                        # Show folder size human readable",
      "du -sh *                            # Show size of each item in current folder",
      "du --max-depth=1 /home               # Limit depth to 1 level"
    ]
  },
  "find": {
    "description": "Search for files in a directory hierarchy.",
    "flags": {
      "-name": "Search for files by name.",
      "-type": "Search by file type.",
      "-exec": "Execute command on found files.",
      "-mtime": "Find files modified n days ago.",
      "-print0": "Print file names followed by a null character, safe for piping."
    },
    "usage": [
      "find . -type f -print0                 # Find all regular files, null separated",
      "find /var/log -name '*.log'            # Find .log files in /var/log",
      "find /tmp -mtime -7                    # Find files modified in last 7 days"
    ]
  },
  "ssh": {
    "description": "Open a secure shell (SSH) connection to a remote host.",
    "flags": {
      "-p": "Specify port to connect to on the remote host.",
      "-i": "Select identity (private key) file.",
      "-v": "Verbose mode.",
      "-X": "Enable X11 forwarding."
    },
    "usage": [
      "ssh user@host                         # Connect to remote host",
      "ssh -p 2222 user@host                 # Connect to port 2222",
      "ssh -i ~/.ssh/id_rsa user@host        # Connect using specific key"
    ]
  },
  "apt": {
    "description": "Command-line interface for the package management system in Debian-based Linux distributions.",
    "flags": {
      "update": "Update package index files.",
      "upgrade": "Upgrade all upgradable packages.",
      "install": "Install new packages.",
      "remove": "Remove packages."
    },
    "usage": [
      "apt update                      # Update available package lists",
      "apt upgrade                     # Upgrade all installed packages",
      "apt install nginx               # Install nginx web server",
      "apt remove apache2              # Remove Apache server"
    ]
  },
  "apt-get": {
    "description": "Lower-level package management command for Debian and Ubuntu systems.",
    "flags": {
      "update": "Update package lists.",
      "upgrade": "Perform package upgrades.",
      "install": "Install specified package(s).",
      "remove": "Remove specified package(s)."
    },
    "usage": [
      "apt-get update                  # Update package database",
      "apt-get upgrade                # Upgrade installed packages",
      "apt-get install curl           # Install curl utility",
      "apt-get remove vim             # Remove vim editor"
    ]
  },
  "ipconfig": {
    "description": "Windows command to display current TCP/IP network configuration values.",
    "flags": {
      "/all": "Display detailed all configuration information.",
      "/release": "Release the current DHCP IP address lease.",
      "/renew": "Renew the DHCP IP address lease."
    },
    "usage": [
      "ipconfig                       # Display basic IP info",
      "ipconfig /all                  # Show full network config",
      "ipconfig /release              # Release IP address",
      "ipconfig /renew                # Obtain new IP address"
    ]
  },
  "ifconfig": {
    "description": "Unix and Linux command to configure network interfaces.",
    "flags": {
      "-a": "Display all interfaces, even if down.",
      "up": "Activate the interface.",
      "down": "Deactivate the interface."
    },
    "usage": [
      "ifconfig                      # Show active interfaces",
      "ifconfig -a                   # Show all interfaces",
      "ifconfig eth0 up              # Bring interface eth0 up",
      "ifconfig eth0 down            # Bring interface eth0 down"
    ]
  },
  "dir": {
    "description": "Windows command to list directory contents.",
    "flags": {
      "/A": "Show files with specified attributes.",
      "/P": "Pause after each screenful of information.",
      "/W": "Wide list format."
    },
    "usage": [
      "dir                          # List files in current directory",
      "dir /A:H                     # Show hidden files",
      "dir /W                       # List files in wide format"
    ]
  },
  "tasklist": {
    "description": "Windows command to list currently running processes.",
    "flags": {
      "/S": "Connect to a remote system.",
      "/FI": "Filter tasks by criteria."
    },
    "usage": [
      "tasklist                    # List running processes",
      "tasklist /FI \"STATUS eq RUNNING\"    # List only running processes"
    ]
  },
  "defaults": {
    "description": "macOS command-line interface for user defaults system.",
    "flags": {
      "write": "Write a value to a user defaults domain.",
      "read": "Read a key from a domain."
    },
    "usage": [
      "defaults write com.apple.finder AppleShowAllFiles YES    # Show hidden files in Finder",
      "defaults read com.apple.finder AppleShowAllFiles         # Check value"
    ]
  },
  "brew": {
    "description": "Popular macOS package manager.",
    "flags": {
      "install": "Install software packages.",
      "update": "Update Homebrew and formulae.",
      "upgrade": "Upgrade installed packages.",
      "remove": "Delete installed packages."
    },
    "usage": [
      "brew install wget             # Install wget utility",
      "brew update                  # Update Homebrew formulae",
      "brew upgrade                 # Upgrade all packages",
      "brew remove wget             # Remove wget"
    ]
  },
  "open": {
    "description": "macOS command to open files and applications.",
    "flags": {
      "-a": "Open with a specified application."
    },
    "usage": [
      "open -a Safari               # Open web browser Safari",
      "open README.md              # Open README.md in default editor"
    ]
  },
  "ping": {
    "description": "Send ICMP echo request packets to network hosts for connectivity tests.",
    "flags": {
      "-c": "Specify the number of packets to send.",
      "-i": "Set interval between packets.",
      "-t": "Specify IP packet Time-To-Live."
    },
    "usage": [
      "ping google.com              # Ping google indefinitely",
      "ping -c 4 google.com         # Send 4 packets",
      "ping -i 2 google.com         # Send a packet every 2 seconds"
    ]
  },
  "traceroute": {
    "description": "Show the route packets take to a network host.",
    "flags": {
      "-m": "Set maximum number of hops.",
      "-q": "Set number of queries per hop."
    },
    "usage": [
      "traceroute google.com        # Trace route to google.com",
      "traceroute -m 15 google.com  # Limit max hops to 15"
    ]
  },
  "whoami": {
    "description": "Display the current logged in user.",
    "flags": {},
    "usage": [
      "whoami                      # Show current user name"
    ]
  },
  "uptime": {
    "description": "Show system uptime and load averages.",
    "flags": {},
    "usage": [
      "uptime                      # Display how long system has been running"
    ]
  },
  "clear": {
    "description": "Clear the terminal screen.",
    "flags": {},
    "usage": [
      "clear                       # Clear console content"
    ]
  },
  "history": {
    "description": "Display the command history.",
    "flags": {
      "-c": "Clear the history list.",
      "-d": "Delete a specific entry from the history."
    },
    "usage": [
      "history                     # Show command history",
      "history -c                  # Clear command history",
      "history -d 10               # Delete the 10th entry from history"
    ]
  },
  "alias": {
    "description": "Create shortcuts for commands.",
    "flags": {
      "-p": "Print all defined aliases.",
      "-d": "Delete an alias."
    },
    "usage": [
      "alias ll='ls -l'            # Create an alias for 'ls -l'",
      "alias -p                    # Print all aliases",
      "unalias ll                  # Remove the alias 'll'"
    ]
  },
  "wget": {
    "description": "Non-interactive network downloader.",
    "flags": {
      "-O": "Write documents to FILE instead of standard output.",
      "-c": "Continue getting a partially-downloaded file.",
      "-q": "Quiet mode, no output.",
      "-r": "Recursive download.",
      "-p": "Download all necessary files for displaying HTML pages."
    },
    "usage": [
      "wget http://example.com/file.zip          # Download a file",
      "wget -O myfile.zip http://example.com/file.zip  # Save as myfile.zip",
      "wget -c http://example.com/largefile.zip  # Continue download of a large file",
      "wget -r http://example.com/dir/           # Recursively download a directory",
      "wget -p http://example.com/page.html       # Download all files needed to display the page"
    ]
  },
  "scp": {
    "description": "Securely copy files between hosts on a network.",
    "flags": {
      "-r": "Copy directories recursively.",
      "-P": "Specify the port to connect to on the remote host.",
      "-i": "Select the identity file (private key) for authentication."
    },
    "usage": [
      "scp file.txt user@remote:/path/to/destination/  # Copy file to remote host",
      "scp -r folder/ user@remote:/path/to/destination/  # Copy directory to remote host",
      "scp -P 2222 file.txt user@remote:/path/to/destination/  # Copy file using a specific port",
      "scp -i ~/.ssh/id_rsa file.txt user@remote:/path/to/destination/  # Copy file using a specific identity file"
    ]
  },
  "rsync": {
    "description": "Synchronize files and directories between two locations.",
    "flags": {
      "-a": "Archive mode; equals -rlptgoD (no -H,-A, -X).",
      "-v": "Verbose output.",
      "-z": "Compress file data during transfer.",
      "--delete": "Delete files that don't exist on the source."
    },
    "usage": [
      "rsync -avz source/ destination/          # Sync files with compression",
      "rsync -avz --delete source/ destination/  # Sync files and delete extra files in destination",
      "rsync -avz --progress source/ destination/  # Show progress during transfer"
    ]
  },
  "git": {
    "description": "Version control system to track changes in source code during software development.",
    "flags": {
      "clone": "Clone a repository into a new directory.",
      "commit": "Record changes to the repository.",
      "push": "Update remote refs along with associated objects.",
      "pull": "Fetch from and integrate with another repository or a local branch.",
      "status": "Show the working tree status.",
      "branch": "List, create, or delete branches."
    },
    "usage": [
      "git clone <repository-url>    # Clone a repository",
      "git commit -m 'Initial commit'  # Commit changes with a message",
      "git push origin main            # Push changes to the remote repository",
      "git pull origin main            # Pull changes from the remote repository",
      "git status                      # Check the status of the working directory",
      "git branch                      # List all branches"
    ]
  },
  "docker": {
    "description": "Platform for developing, shipping, and running applications in containers.",
    "flags": {
      "run": "Run a command in a new container.",
      "build": "Build an image from a Dockerfile.",
      "ps": "List running containers.",
      "images": "List images.",
      "exec": "Execute a command in a running container."
    },
    "usage": [
      "docker run -d nginx                # Run nginx in detached mode",
      "docker build -t myapp .            # Build an image from Dockerfile",
      "docker ps                          # List all running containers",
      "docker images                      # List all Docker images",
      "docker exec -it mycontainer bash   # Execute bash in a running container"
    ]
  },
  "mysql": {
    "description": "Command-line tool for managing MySQL databases.",
    "flags": {
      "-u": "Specify the MySQL user.",
      "-p": "Prompt for the MySQL user password.",
      "-h": "Specify the MySQL host.",
      "-e": "Execute a query and exit.",
      "--database": "Select a specific database to use."
    },
    "usage": [
      "mysql -u root -p                  # Connect to MySQL as root user",
      "mysql -u user -p -h localhost      # Connect to MySQL on localhost",
      "mysql -u user -p -e 'SHOW DATABASES;'  # Execute a query and exit",
      "mysql -u user -p --database=mydb   # Connect to a specific database"
    ]
  },
  "psql": {
    "description": "Command-line interface for PostgreSQL databases.",
    "flags": {
      "-U": "Specify the PostgreSQL user.",
      "-h": "Specify the PostgreSQL host.",
      "-d": "Connect to a specific database.",
      "-c": "Execute a command and exit."
    },
    "usage": [
      "psql -U postgres -h localhost       # Connect to PostgreSQL as postgres user",
      "psql -U user -d mydb -h localhost   # Connect to a specific database",
      "psql -U user -c 'SELECT * FROM table;'  # Execute a command and exit",
      "psql -U user -d mydb -h localhost -c 'CREATE TABLE new_table (id SERIAL PRIMARY KEY);'  # Create a new table"
    ]
  },
  "mongo": {
    "description": "Command-line interface for MongoDB databases.",
    "flags": {
      "-u": "Specify the MongoDB user.",
      "-p": "Prompt for the MongoDB user password.",
      "--host": "Specify the MongoDB host.",
      "--port": "Specify the MongoDB port.",
      "--eval": "Execute a JavaScript expression and exit."
    },
    "usage": [
      "mongo -u admin -p password --host localhost --port 27017  # Connect to MongoDB",
      "mongo --eval 'db.getCollectionNames();'  # Execute a command and exit",
      "mongo --host localhost --port 27017 mydb --eval 'db.users.find();'  # Query a specific database"
    ]
  },
  "redis-cli": {
    "description": "Command-line interface for interacting with Redis databases.",
    "flags": {
      "-h": "Specify the Redis host.",
      "-p": "Specify the Redis port.",
      "-a": "Authenticate with the specified password.",
      "--eval": "Execute a Lua script."
    },
    "usage": [
      "redis-cli -h localhost -p 6379 -a password  # Connect to Redis",
      "redis-cli --eval script.lua key1 key2  # Execute a Lua script",
      "redis-cli -h localhost -p 6379 --eval 'return redis.call(\"PING\")'  # Ping the Redis server"
    ]
  },
  "sqlite3": {
    "description": "Command-line interface for SQLite databases.",
    "flags": {
      "-header": "Display column headers in the output.",
      "-column": "Format output as columns.",
      "-batch": "Run in batch mode, no interactive prompts.",
      "-init": "Execute commands from a file before entering the interactive mode."
    },
    "usage": [
      "sqlite3 mydatabase.db              # Open or create a SQLite database",
      "sqlite3 mydatabase.db -header -column -batch  # Open database with formatted output",
      "sqlite3 mydatabase.db -init init.sql  # Execute commands from a file",
      "sqlite3 mydatabase.db 'SELECT * FROM users;'  # Execute a query"
    ]
  },
  "firewall-cmd": {
    "description": "Command-line interface for managing the firewall in Linux systems using firewalld.",
    "flags": {
      "--zone": "Specify the zone to operate on.",
      "--add-port": "Add a port to the specified zone.",
      "--remove-port": "Remove a port from the specified zone.",
      "--list-all": "List all rules in the specified zone.",
      "--set-default-zone": "Set the default zone."
    },
    "usage": [
      "firewall-cmd --zone=public --add-port=80/tcp  # Add HTTP port to public zone",
      "firewall-cmd --zone=public --remove-port=80/tcp  # Remove HTTP port from public zone",
      "firewall-cmd --zone=public --list-all  # List all rules in public zone",
      "firewall-cmd --set-default-zone=public  # Set public as the default zone"
    ]
  },
  "iptables": {
    "description": "Command-line utility for configuring the Linux kernel firewall.",
    "flags": {
      "-L": "List all rules in the selected chain.",
      "-A": "Append a rule to the end of the selected chain.",
      "-D": "Delete a rule from the selected chain.",
      "-I": "Insert a rule at the top of the selected chain.",
      "-F": "Flush all rules in the selected chain."
    },
    "usage": [
      "iptables -L                          # List all firewall rules",
      "iptables -A INPUT -p tcp --dport 22 -j ACCEPT  # Allow SSH traffic",
      "iptables -D INPUT -p tcp --dport 22 -j ACCEPT  # Remove SSH rule",
      "iptables -I INPUT 1 -p tcp --dport 80 -j ACCEPT  # Insert rule to allow HTTP traffic at the top",
      "iptables -F INPUT                     # Flush all rules in the INPUT chain"
    ]
  },
  "nmap": {
    "description": "Network exploration tool and security/port scanner.",
    "flags": {
      "-sS": "TCP SYN scan.",
      "-sU": "UDP scan.",
      "-p": "Specify port(s) to scan.",
      "-O": "Enable OS detection.",
      "-A": "Enable OS detection, version detection, script scanning, and traceroute."
    },
    "usage": [
      "nmap -sS -p 22,80,443 example.com  # Perform a SYN scan on specified ports",
      "nmap -sU -p 53 example.com         # Perform a UDP scan on port 53",
      "nmap -O example.com                 # Enable OS detection",
      "nmap -A example.com                 # Enable OS detection, version detection, script scanning, and traceroute"
    ]
  },
  "htop": {
    "description": "Interactive process viewer for Unix systems.",
    "flags": {
      "-d": "Set delay between updates in tenths of seconds.",
      "-u": "Show processes for a specific user.",
      "-s": "Sort processes by a specific field."
    },
    "usage": [
      "htop                             # Start htop with default settings",
      "htop -d 10                        # Set update delay to 1 second",
      "htop -u username                  # Show processes for a specific user",
      "htop -s MEM                       # Sort processes by memory usage"
    ]
  },
  "journalctl": {
    "description": "Query the systemd journal.",
    "flags": {
      "-u": "Show logs for a specific unit.",
      "-f": "Follow the log output.",
      "--since": "Show logs since a specific time.",
      "--until": "Show logs until a specific time."
    },
    "usage": [
      "journalctl -u nginx                # Show logs for nginx service",
      "journalctl -f                      # Follow the latest log entries",
      "journalctl --since '2023-10-01'    # Show logs since October 1, 2023",
      "journalctl --until '1 hour ago'    # Show logs until one hour ago"
    ]
  },
  "systemd-analyze": {
    "description": "Analyze and debug systemd services.",
    "flags": {
      "blame": "Show time taken by each service to start.",
      "critical-chain": "Show the critical chain of services that delayed boot.",
      "plot": "Generate a plot of the boot process.",
      "time": "Show the total time taken to boot."
    },
    "usage": [
      "systemd-analyze blame              # Show time taken by each service",
      "systemd-analyze critical-chain     # Show critical chain of services",
      "systemd-analyze plot > boot.svg    # Generate a plot of the boot process",
      "systemd-analyze time                # Show total boot time"
    ]
  },
  "systemd-cgls": {
    "description": "Show control groups in a tree format.",
    "flags": {
      "-u": "Show only units in the specified control group.",
      "-r": "Show the tree in a raw format.",
      "-p": "Show the process IDs in the tree."
    },
    "usage": [
      "systemd-cgls                      # Show control groups in a tree format",
      "systemd-cgls -u nginx             # Show control groups for nginx service",
      "systemd-cgls -r                   # Show raw format of control groups",
      "systemd-cgls -p                   # Show process IDs in the tree"
    ]
  },
  "systemd-cgtop": {
    "description": "Display control groups and their resource usage.",
    "flags": {
      "-n": "Set the number of iterations before exiting.",
      "-b": "Run in batch mode.",
      "-p": "Show process IDs in the output.",
      "-u": "Show only units in the specified control group."
    },
    "usage": [
      "systemd-cgtop                     # Display control groups and their resource usage",
      "systemd-cgtop -n 10               # Run for 10 iterations",
      "systemd-cgtop -b                  # Run in batch mode",
      "systemd-cgtop -p                  # Show process IDs in the output",
      "systemd-cgtop -u nginx            # Show only units in the nginx control group"
    ]
  }
}
